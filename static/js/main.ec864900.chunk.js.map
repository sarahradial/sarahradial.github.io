{"version":3,"sources":["components/ToggleButton.js","components/Header.js","pages/Home.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["ToggleButton","react_default","a","createElement","className","onClick","this","props","click","Component","Header","components_ToggleButton","sidebarClickHandler","Home","Main","react_router","path","exact","component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","prevState","console","log","state","sidebarOpen","backdropClickHandler","react_router_dom","components_Header","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAgBeA,0LAVX,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAW,aAAaC,QAASC,KAAKC,MAAMC,OAClDP,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,4BANEK,cCgBZC,0LAZX,OACET,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,cACfH,EAAAC,EAAAC,cAACQ,EAAD,CAAcH,MAASF,KAAKC,MAAMK,sBAClCX,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eAAjB,gCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,oBAPNK,sBCQNI,mLAVX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QAAjB,cAJWK,aCcJK,mLATX,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACfH,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWL,aALxBJ,aCqCJU,qBA/Bb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAQRK,oBAAsB,WACpBQ,EAAKM,SAAS,SAACC,GAEb,OADAC,QAAQC,IAAIT,EAAKU,MAAMC,aAChB,CAACA,aAAcJ,EAAUI,gBAZjBX,EAgBnBY,qBAAuB,WACrBZ,EAAKM,SAAS,CAACK,aAAa,KAd5BX,EAAKU,MAAQ,CACXC,aAAa,GAJEX,wEAqBjB,OACEnB,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAQtB,oBAAqBN,KAAKM,sBAClCX,EAAAC,EAAAC,cAACgC,EAAD,cA3BU1B,cCIE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ec864900.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport '../style/ToggleButton.css';\n\nclass ToggleButton extends Component {\n  render() {\n    return (\n      <button className ='toggle-btn' onClick={this.props.click}>\n        <div className = 'toggle-btn-line' />\n        <div className = 'toggle-btn-line' />\n        <div className = 'toggle-btn-line' />\n      </button>\n    );\n  }\n}\n\nexport default ToggleButton;\n","import React, { Component } from 'react';\n\nimport ToggleButton from '../components/ToggleButton';\n\nimport '../style/Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className = 'header'>\n        <nav className = 'header-nav'>\n          <ToggleButton click = {this.props.sidebarClickHandler} />\n          <div className = 'header-logo'> Sarah Anne Yan's Portfolio </div>\n          <div className = 'spacer' />\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className = 'head'>\n        <div className = 'body'>\n          hi\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from '../pages/Home';\n\nclass Main extends Component {\n  render() {\n    return (\n      <div className = 'page-wrapper'>\n        <Switch>\n          <Route path='/' exact component={Home} />\n        </Switch>\n      </div>\n    );\n  }\n}\nexport default Main;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nimport './style/standard.css';\n\nclass App extends Component {\n\n  // this contains all of the props and states that is needed for this class\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sidebarOpen: false\n    };\n  }\n\n  // the below two functions are for the sidebar menu and backdrop color\n  sidebarClickHandler = () => {\n    this.setState((prevState) => {\n      console.log(this.state.sidebarOpen);\n      return {sidebarOpen: !prevState.sidebarOpen};\n    });\n  }\n\n  backdropClickHandler = () => {\n    this.setState({sidebarOpen: false});\n  }\n\n  render() {\n    return (\n      <Router>\n        <Header sidebarClickHandler={this.sidebarClickHandler}/>\n        <Main />\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}